version: '3.9'

services:
  postgres:
    image: poetriumph/postgres
    build:
      context: .
      dockerfile: ./docker/postgres_image/Dockerfile
    container_name: ${PG_CONTAINER_NAME}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
    volumes:
       - postgres_data_poetry:/data/davon-postgres
    restart: unless-stopped
    networks:
          - network
    ports:
      - "5432:5432"

  web:
    image: newa/poetriumph
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    container_name: ${WEB_CONTAINER_NAME}
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PG_CONTAINER_HOST: ${PG_CONTAINER_HOST}
      PG_CONTAINER_NAME: ${PG_CONTAINER_NAME}
      WEB_CONTAINER_NAME: ${WEB_CONTAINER_NAME}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      RECAPTCHA_PUBLIC_KEY: ${RECAPTCHA_PUBLIC_KEY}
      RECAPTCHA_PRIVATE_KEY: ${RECAPTCHA_PRIVATE_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}

    volumes:
      - ./templates:/app/templates
      - ./static:/app/static
    ports:
      - "8008:8000"
    depends_on:
      - postgres
    networks:
          - network


networks:
  network:
    driver: bridge

volumes:
    postgres_data_poetry:
      external: true
